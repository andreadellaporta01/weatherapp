name: iOS Release CI

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    name: Build iOS App Bundle
    runs-on: macos-15

    steps:
      # Step 1: Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set Up JDK for Gradle
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step 3: Install Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Step 4: Build KMP Shared Module
      - name: Build shared module for iOS
        run: |
          ./gradlew :shared:clean :shared:assembleIosX64 :shared:assembleIosArm64 --build-cache --info

      # Step 5: Clean Derived Data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

      # Step 6: Build the archive
      - name: Build the iOS app
        env:
          ONLY_ACTIVE_ARCH: YES
        run: |
          xcodebuild clean archive \
            -project iosApp/iosApp.xcodeproj \
            -scheme iosApp \
            -configuration Release \
            -archivePath $GITHUB_WORKSPACE/build/WeatherApp.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            ARCHS=arm64 \
            -quiet

      # Step 7: Create exportOptions.plist
      - name: Create exportOptions.plist
        env:
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PROVISION_PROFILE_NAME: ${{ secrets.APPLE_PROVISION_PROFILE_NAME }}
        run: |
          cat << EOF > exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$TEAM_ID</string>
              <key>uploadSymbols</key>
              <false/>
              <key>uploadBitcode</key>
              <true/>
              <key>compileBitcode</key>
              <true/>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.dellapp.weatherapp.WeatherApp</key>
                  <string>$APPLE_PROVISION_PROFILE_NAME</string>
              </dict>
          </dict>
          </plist>
          EOF

      # Step 8: Export IPA
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $GITHUB_WORKSPACE/build/WeatherApp.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath $GITHUB_WORKSPACE/build

      # Step 9: Upload IPA Artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-App
          path: build/*.ipa

      # Step 10: Clean up
      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db