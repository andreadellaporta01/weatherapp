name: iOS Release CI

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    name: Build iOS App Bundle
    runs-on: macos-latest

    steps:
      # Step : Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step : Set Up JDK for Gradle
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step : Set up Xcode - use latest stable version
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.4"

      # Install iOS Simulator (this should fix the asset catalog issue)
      - name: Install iOS Simulator
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcrun simctl list runtimes

      # List available simulators and SDKs
      - name: List available simulators and SDKs
        run: |
          xcrun simctl list devicetypes
          xcodebuild -showsdks

      # Decode Keystore and secrets.properties
      - name: Decode secrets and keystore
        run: |
          echo "$SECRETS_FILE" > $GITHUB_WORKSPACE/secrets.properties
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          SECRETS_FILE: ${{ secrets.SECRETS_FILE }}

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Write exportOptions file
      - name: Create exportOptions.plist
        env:
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PROVISION_PROFILE_NAME: ${{ secrets.APPLE_PROVISION_PROFILE_NAME }}
        run: |
          cat << EOF > exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$TEAM_ID</string>
              <key>uploadSymbols</key>
              <false/>
              <key>uploadBitcode</key>
              <false/>
              <key>compileBitcode</key>
              <false/>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.dellapp.weatherapp.WeatherApp</key>
                  <string>$APPLE_PROVISION_PROFILE_NAME</string>
              </dict>
          </dict>
          </plist>
          EOF

      # Clean workspace first
      - name: Clean workspace
        run: |
          rm -rf $GITHUB_WORKSPACE/build
          mkdir -p $GITHUB_WORKSPACE/build

      # Build the archive with specific SDK
      - name: Build the iOS app
        run: |
          # Get the actual iOS SDK version
          IOS_SDK=$(xcrun --sdk iphoneos --show-sdk-version)
          echo "Using iOS SDK version: $IOS_SDK"
          
          xcodebuild clean archive \
            -project $GITHUB_WORKSPACE/iosApp/iosApp.xcodeproj \
            -scheme iosApp \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $GITHUB_WORKSPACE/build/WeatherApp.xcarchive \
            -destination "generic/platform=iOS" \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="${{ secrets.APPLE_PROVISION_PROFILE_NAME }}" \
            IPHONEOS_DEPLOYMENT_TARGET=15.0

      # Export the IPA (App Bundle)
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $GITHUB_WORKSPACE/build/WeatherApp.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath $GITHUB_WORKSPACE/build \
            -allowProvisioningUpdates

      # Step : Upload the IPA as an artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-App
          path: build/*.ipa

      # Upload build logs in case of failure
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ~/Library/Developer/Xcode/DerivedData/*/Logs/
            /tmp/xcodebuild*.log

# TODO upload to testflight
#      - name: Upload to TestFlight
#        env:
#          APPLE_ID: ${{ secrets.APPLE_APP_UPLOAD_USERID }}
#          APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_UPLOAD_PASSWORD }}
#          IPA_PATH: build/WeatherApp.ipa  # Update this to your IPA path
#        run: |
#          xcrun altool --upload-app \
#            --type ios \
#            --file "$IPA_PATH" \
#            --username "$APPLE_ID" \
#            --password "$APP_SPECIFIC_PASSWORD" \
#            --verbose  # Optional: for detailed logs
#
#      - name: Check Upload Status
#        if: failure()
#        run: |
#          echo "Upload failed. Check the logs above for more details."